generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("create_at")
  updateAt   DateTime @updatedAt @map("update_at")
  email      String   @unique
  name       String   @unique
  password   String
  avatarPath String   @default("/uploads/default-avatar.png") @map("avatar_path")
  phone      String?  @default("")

  favorites Product[]

  orders  Order[]
  reviews Review[]
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("create_at")
  updateAt    DateTime @updatedAt @map("update_at")
  name        String
  slug        String   @unique
  description String
  price       String
  images      String[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  orderItems OrderItem[]
  reviews    Review[]
  user       User?       @relation(fields: [userId], references: [id])
  userId     Int?        @map("user_id")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")
  name      String
  slug      String   @unique

  product Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")
  rating    Int
  text      String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}

model Order {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @map("create_at")
  updateAt  DateTime        @updatedAt @map("update_at")
  status    EnumOrderStatus @default(PENDING)

  items OrderItem[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}

model Test {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("create_at")
  updateAt  DateTime @updatedAt @map("update_at")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
